{"version":3,"sources":["api/apiUtils.js","api/groceriesApi.js","api/storeApi.js","components/admin/CreateGroceryPage.js"],"names":["handleResponse","response","a","ok","json","status","text","error","Error","handleError","console","alert","baseUrl","getGroceries","fetch","then","catch","getGrocery","id","saveGrocery","item","method","headers","body","JSON","stringify","parseInt","checked","deleteGrocery","groceryId","useStyles","makeStyles","theme","root","flexGrow","checkBox","float","formControl","marginLeft","spacing","marginTop","minWidth","selectEmpty","CreateGroceryPage","props","classes","match","params","useState","setItem","stores","setStores","handleInputChange","event","target","value","type","name","useEffect","groceryApi","data","length","className","Grid","container","xs","onSubmit","store","isStaple","zone","dir","autoComplete","TextField","label","variant","onChange","undefined","FormControl","InputLabel","htmlFor","Select","native","inputProps","aria-label","map","option","Checkbox","color","Button"],"mappings":"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","file":"static/js/7.8f9d4b5f.chunk.js","sourcesContent":["export async function handleResponse(response) {\n  if (response.ok) return response.json();\n  if (response.status === 400) {\n    // So, a server-side validation error occurred.\n    // Server side validation returns a string error message, so parse as text instead of json.\n    const error = await response.text();\n    throw new Error(error);\n  }\n  throw new Error(\"Network response was not ok.\");\n}\n\n// In a real app, would likely call an error logging service.\nexport function handleError(error) {\n  // eslint-disable-next-line no-console\n  console.error(\"API call failed. \" + error);\n  alert(error)\n  throw error;\n}\n","import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = 'http://localhost:3001/groceries/';\n\n\nexport function getGroceries() {\n  return fetch(baseUrl)\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function getGrocery(id) {\n  return fetch(baseUrl + id)\n    .then(handleResponse)\n    .catch(handleError);\n}\n\n\nexport function saveGrocery(item) {\n  return fetch(baseUrl + (item.id || \"\"), {\n    method: item.id === null ? \"POST\" : \"PUT\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      ...item,\n      // Parse authorId to a number (in case it was sent as a string).\n      id: parseInt(item.id, 10),\n      checked: false\n    })\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteGrocery(groceryId) {\n  return fetch(baseUrl + groceryId, { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n","import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = 'http://localhost:3001/stores/';\n\n\nexport function getStores() {\n  return fetch(baseUrl)\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function getStore(id) {\n  return fetch(baseUrl + id)\n    .then(handleResponse)\n    .catch(handleError);\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Grid, Checkbox, Button, FormControl, Select, InputLabel} from '@material-ui/core';\nimport * as groceryApi from \"../../api/groceriesApi\";\nimport * as storeApi from \"../../api/storeApi\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    checkBox: {\n        float: 'right'\n    },\n    formControl: {\n        marginLeft: theme.spacing(5),\n        marginTop: theme.spacing(2),\n        //margin: theme.spacing(2),\n        minWidth: 200,\n      },\n      selectEmpty: {\n        marginTop: theme.spacing(2),\n      },\n  }));\n\nfunction CreateGroceryPage(props){\n    const classes = useStyles();\n\n    const id = props.match.params.id ? parseInt(props.match.params.id) : null;\n    const [item, setItem] = useState({});\n    const [stores, setStores] = useState([]);\n    \n    useEffect(() => {\n        if (id !== null) {\n            groceryApi.getGrocery(id).then(data => setItem(data));\n        }\n        if (!stores.length) {\n            storeApi.getStores().then(data => setStores(data));\n        }\n        \n    }, [setItem, id, stores, setStores]);\n\n    function handleSubmit() {\n        \n        const data = {\n            \"id\": id,\n            \"name\": item.name,\n            \"store\": item.store == null ? 0 : parseInt(item.store),\n            \"isStaple\": item.isStaple,\n            \"zone\": parseInt(item.zone)\n        };\n        groceryApi.saveGrocery(data).then(data => {\n            console.dir(data); \n        });\n    }\n\n    function handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        setItem({...item, [name]: value});\n    }\n\n    return (\n    <div className={classes.root}>\n        <Grid container spacing={3}>\n        <Grid item xs={12}><h2 className={classes.formControl}>{id !== null ? \"Edit \" : \"New \"}Item</h2>\n        </Grid>\n        <form onSubmit={handleSubmit} autoComplete=\"off\" >\n        \n            <Grid item xs={12}>\n                <TextField className={classes.formControl} label=\"Name\" variant=\"outlined\" name=\"name\" onChange={handleInputChange} value={item.name === undefined ? \"\" : item.name} />\n            </Grid>\n\n            <Grid item xs={12}>\n                <FormControl className={classes.formControl} variant=\"outlined\" >\n                    <InputLabel htmlFor=\"outlined-age-native-simple\">Store</InputLabel>\n                    <Select\n                    native\n                    value={item.store === undefined ? \"\" : item.store}\n                    onChange={handleInputChange}\n                    label=\"Store\"\n                    inputProps={{\n                        name: 'store',\n                        id: 'outlined-age-native-simple',\n                    }}\n                    >\n                    <option aria-label=\"None\" value=\"\" />\n                    {stores.map((option) => (\n                        <option key={option.id} value={option.id}>\n                        {option.name}\n                        </option>\n                    ))}\n                    </Select>\n                </FormControl>\n            </Grid>\n\n            <Grid item xs={12}>\n                <TextField className={classes.formControl} label=\"Zone\" variant=\"outlined\" name=\"zone\" onChange={handleInputChange} value={item.zone === undefined ? \"\" : item.zone} />\n            </Grid>\n\n            <Grid item xs={12}>      \n                <FormControl className={classes.formControl} variant=\"outlined\" >\n                    <div>\n                        Is Staple:\n                    <Checkbox color=\"primary\" checked={item.isStaple === undefined ? false : item.isStaple} onChange={handleInputChange} name=\"isStaple\" />\n                    </div>\n                </FormControl>\n            </Grid>\n\n            <Grid item xs={12}>\n                <FormControl className={classes.formControl} variant=\"outlined\" >\n                    <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\" >Submit</Button>\n                </FormControl>\n            </Grid>\n        \n    </form>\n    </Grid>\n    </div>\n    );\n}\n\nexport default CreateGroceryPage;"],"sourceRoot":""}