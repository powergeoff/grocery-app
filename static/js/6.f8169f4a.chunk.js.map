{"version":3,"sources":["api/apiUtils.js","api/groceriesApi.js","components/admin/AdminTablePage.js"],"names":["handleResponse","response","a","ok","json","status","text","error","Error","handleError","console","alert","baseUrl","getGroceries","fetch","then","catch","getGrocery","id","saveGrocery","item","method","headers","body","JSON","stringify","parseInt","checked","deleteGrocery","groceryId","useStyles","makeStyles","root","container","maxHeight","button","padding","AdminTablePage","classes","useState","items","setItems","useEffect","groceryApi","data","sort","b","zone","log","className","stickyHeader","aria-label","align","map","row","component","scope","name","store","isStaple","href","onClick"],"mappings":"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","file":"static/js/6.f8169f4a.chunk.js","sourcesContent":["export async function handleResponse(response) {\n  if (response.ok) return response.json();\n  if (response.status === 400) {\n    // So, a server-side validation error occurred.\n    // Server side validation returns a string error message, so parse as text instead of json.\n    const error = await response.text();\n    throw new Error(error);\n  }\n  throw new Error(\"Network response was not ok.\");\n}\n\n// In a real app, would likely call an error logging service.\nexport function handleError(error) {\n  // eslint-disable-next-line no-console\n  console.error(\"API call failed. \" + error);\n  alert(error)\n  throw error;\n}\n","import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = 'http://localhost:3001/groceries/';\n\n\nexport function getGroceries() {\n  return fetch(baseUrl)\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function getGrocery(id) {\n  return fetch(baseUrl + id)\n    .then(handleResponse)\n    .catch(handleError);\n}\n\n\nexport function saveGrocery(item) {\n  return fetch(baseUrl + (item.id || \"\"), {\n    method: item.id === null ? \"POST\" : \"PUT\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      ...item,\n      // Parse authorId to a number (in case it was sent as a string).\n      id: parseInt(item.id, 10),\n      checked: false\n    })\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteGrocery(groceryId) {\n  return fetch(baseUrl + groceryId, { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n","import React, { useState, useEffect } from 'react';\nimport * as groceryApi from \"../../api/groceriesApi\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst useStyles = makeStyles({\n    root: {\n      //width: '100%',\n    },\n    container: {\n      maxHeight: 610,\n    },\n    button: {\n        padding: 0\n    }\n  });\n\nfunction AdminTablePage(){\n    const classes = useStyles();\n    const [items, setItems] = useState(null);\n\n    useEffect(() => {\n      if (items == null) {\n        groceryApi.getGroceries().then(data => {\n        data.sort(function (a, b) {\n            return a.zone - b.zone;\n        });\n        setItems(data)\n        });\n      }\n\n      return function cleanup() {\n        console.log('clean up clean up! everybody\\'s job is cleanup!');\n      };\n\n    }, [items, setItems]);\n\n    function deleteItem(id) {\n      groceryApi.deleteGrocery(id).then(() => {\n        groceryApi.getGroceries().then(data => {\n          data.sort(function (a, b) {\n              return a.zone - b.zone;\n          });\n          setItems(data)\n        });\n      });\n    }\n\n    return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Grocery Items</TableCell>\n                <TableCell align=\"right\">ID</TableCell>\n                <TableCell align=\"right\">Zone</TableCell>\n                <TableCell align=\"right\">Store</TableCell>\n                <TableCell align=\"right\">Staple</TableCell>\n                <TableCell align=\"right\">Edit</TableCell>\n                <TableCell align=\"right\">Delete</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {items && items.map((row) => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.id}</TableCell>\n                  <TableCell align=\"right\">{row.zone}</TableCell>\n                  <TableCell align=\"right\">{row.store === 0 ? \"Stop & Shop\" : \"Whole Foods\"}</TableCell>\n                  <TableCell align=\"right\">{row.isStaple ? <CheckIcon /> : ''}</TableCell>\n                  <TableCell className={classes.button} align=\"right\"><Button className={classes.button} href={\"/create/\" + row.id}><EditIcon className={classes.button} /></Button></TableCell>\n                  <TableCell className={classes.button} align=\"right\"><Button className={classes.button} onClick={() => deleteItem(row.id)}><DeleteIcon className={classes.button} /></Button></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n      );\n\n    \n}\n\nexport default AdminTablePage;"],"sourceRoot":""}